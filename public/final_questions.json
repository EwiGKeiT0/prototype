{
  "metadata": {
    "title": "操作系统课后习题题库（整合版）",
    "description": "从教材1-13章提取的课后习题，包含文字描述和图片链接；已与计算题扩充部分整合",
    "total_questions": 218,
    "questions_with_images": 6,
    "total_images": 6,
    "chapters": [
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13
    ],
    "created_at": "2024-01-01",
    "version": "1.0+expanded",
    "format": "text_description + local_image_paths"
  },
  "questions": [
    {
      "id": "第1章-1-1",
      "chapter": 1,
      "question_number": "1-1",
      "content": "如何定义一个操作系统？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "如何定义一个操作系统？"
    },
    {
      "id": "第1章-1-2",
      "chapter": 1,
      "question_number": "1-2",
      "content": "早期操作系统设计的主要目标是什么？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "早期操作系统设计的主要目标是什么？"
    },
    {
      "id": "第1章-1-3",
      "chapter": 1,
      "question_number": "1-3",
      "content": "何谓作业和作业步？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "何谓作业和作业步？"
    },
    {
      "id": "第1章-1-4",
      "chapter": 1,
      "question_number": "1-4",
      "content": "引入多道程序设计的主要目的是什么？什么是多道程序设计？它有哪些特点？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "引入多道程序设计的主要目的是什么？什么是多道程序设计？它有哪些特点？"
    },
    {
      "id": "第1章-1-5",
      "chapter": 1,
      "question_number": "1-5",
      "content": "叙述操作系统的基本功能和提供的服务。操作系统具有哪些特性？衡量一个批处 理操作系统有哪些性能指标？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "叙述操作系统的基本功能和提供的服务。操作系统具有哪些特性？衡量一个批处 理操作系统有哪些性能指标？"
    },
    {
      "id": "第1章-1-6",
      "chapter": 1,
      "question_number": "1-6",
      "content": "解释概念：吞吐量、周转时间和响应时间。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "解释概念：吞吐量、周转时间和响应时间。"
    },
    {
      "id": "第1章-1-7",
      "chapter": 1,
      "question_number": "1-7",
      "content": "批处理系统、分时系统和实时系统各有什么特点？各适合应用于哪些方面？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "批处理系统、分时系统和实时系统各有什么特点？各适合应用于哪些方面？"
    },
    {
      "id": "第1章-1-8",
      "chapter": 1,
      "question_number": "1-8",
      "content": "何谓用户与操作系统之间的接口？在用户与操作系统之间通常提供哪几种类型的 接口？其主要功能是什么？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "何谓用户与操作系统之间的接口？在用户与操作系统之间通常提供哪几种类型的 接口？其主要功能是什么？"
    },
    {
      "id": "第1章-1-9",
      "chapter": 1,
      "question_number": "1-9",
      "content": "设计一个操作系统应遵循哪些规范标准？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "设计一个操作系统应遵循哪些规范标准？"
    },
    {
      "id": "第1章-1-10",
      "chapter": 1,
      "question_number": "1-10",
      "content": "常用的操作系统结构设计有哪些分类方法？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "常用的操作系统结构设计有哪些分类方法？"
    },
    {
      "id": "第1章-1-11",
      "chapter": 1,
      "question_number": "1-11",
      "content": "什么是对称多处理？它有什么好处？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "什么是对称多处理？它有什么好处？"
    },
    {
      "id": "第1章-1-13",
      "chapter": 1,
      "question_number": "1-13",
      "content": "为了实现系统保护，CPU 设计有多种状态，常用的是哪两种状态？各种状态下 执行什么程序？什么时候发生状态转换？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "为了实现系统保护，CPU 设计有多种状态，常用的是哪两种状态？各种状态下 执行什么程序？什么时候发生状态转换？"
    },
    {
      "id": "第1章-1-18",
      "chapter": 1,
      "question_number": "1-18",
      "content": "批处理系统提高了系统各种资源的利用率和系统吞吐量，因而缩短了作业的周 转时间。这句话对吗？请解释。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "批处理系统提高了系统各种资源的利用率和系统吞吐量，因而缩短了作业的周 转时间。这句话对吗？请解释。"
    },
    {
      "id": "第1章-1-19",
      "chapter": 1,
      "question_number": "1-19",
      "content": "在批处理系统中，有两个程序参与运行。其中程序 A 要做的工作依次为：计算 10 分钟，5 分钟 I/O1，计算 5 分钟，10 分钟 I/O2，计算 10 分钟；程序 B 要做的工作依次 为：10分钟I/O1，计算10分钟，5分钟I/O2，计算5分钟，10分钟I/O2。假定单道和多道 运行时都是A先运行。分别计算两种方式运行时，两个程序的周转时间和CPU的利用率。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "在批处理系统中，有两个程序参与运行。其中程序 A 要做的工作依次为：计算 10 分钟，5 分钟 I/O1，计算 5 分钟，10 分钟 I/O2，计算 10 分钟；程序 B 要做的工作依次 为：10分钟I/O1，计算10分钟，5分钟I/O2，计算5分钟，10分钟I/O2。假定单道和多道 运行时都是A先运行。分别计算两种方式运行时，两个程序的周转时间和CPU的利用率。"
    },
    {
      "id": "第1章-1-20",
      "chapter": 1,
      "question_number": "1-20",
      "content": "假设在一个多道程序系统中，同时存在三个作业，它们对CPU和I/O设备的使用时间如下：作业1（计算5ms, I/O 10ms, 计算5ms），作业2（I/O 8ms, 计算6ms），作业3（计算7ms, I/O 4ms）。假设I/O操作可以并行。计算在单道和理想的多道环境下，完成这三个作业的总耗时分别是多少？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "假设在一个多道程序系统中，同时存在三个作业，它们对CPU和I/O设备的使用时间如下：作业1（计算5ms, I/O 10ms, 计算5ms），作业2（I/O 8ms, 计算6ms），作业3（计算7ms, I/O 4ms）。假设I/O操作可以并行。计算在单道和理想的多道环境下，完成这三个作业的总耗时分别是多少？"
    },
    {
      "id": "第1章-1-21",
      "chapter": 1,
      "question_number": "1-21",
      "content": "在一个分时系统中，假设有4个用户同时在线，系统平均在2秒内响应用户请求。如果系统开销（如上下文切换）占用了20%的CPU时间，请计算为每个用户设定的平均时间片长度是多少？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "在一个分时系统中，假设有4个用户同时在线，系统平均在2秒内响应用户请求。如果系统开销（如上下文切换）占用了20%的CPU时间，请计算为每个用户设定的平均时间片长度是多少？"
    },
    {
      "id": "第1章-1-22",
      "chapter": 1,
      "question_number": "1-22",
      "content": "基于原题1-19的场景，如果在多道程序环境下，程序B的I/O操作可以和程序A的计算操作在时间上重叠，请详细画出两个程序并行执行的时间轴图，并计算完成所有任务所需的总时间。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "基于原题1-19的场景，如果在多道程序环境下，程序B的I/O操作可以和程序A的计算操作在时间上重叠，请详细画出两个程序并行执行的时间轴图，并计算完成所有任务所需的总时间。"
    },
    {
      "id": "第1章-1-23",
      "chapter": 1,
      "question_number": "1-23",
      "content": "接上题，请分别计算在单道和多道程序环境下系统的CPU利用率。并解释为什么多道程序设计能显著提高CPU利用率。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "接上题，请分别计算在单道和多道程序环境下系统的CPU利用率。并解释为什么多道程序设计能显著提高CPU利用率。"
    },
    {
      "id": "第1章-1-24",
      "chapter": 1,
      "question_number": "1-24",
      "content": "多道程序设计提高了CPU利用率，但为什么通常会导致单个作业的周转时间变长？请解释这其中的权衡关系。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "多道程序设计提高了CPU利用率，但为什么通常会导致单个作业的周转时间变长？请解释这其中的权衡关系。"
    },
    {
      "id": "第1章-1-25",
      "chapter": 1,
      "question_number": "1-25",
      "content": "实时操作系统最核心的设计目标是什么？这个目标是如何影响其资源调度策略的，与批处理系统有何根本不同？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "实时操作系统最核心的设计目标是什么？这个目标是如何影响其资源调度策略的，与批处理系统有何根本不同？"
    },
    {
      "id": "第1章-1-26",
      "chapter": 1,
      "question_number": "1-26",
      "content": "为什么说操作系统的异步性是并发和共享的必然结果？它给操作系统设计带来了哪些挑战？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "为什么说操作系统的异步性是并发和共享的必然结果？它给操作系统设计带来了哪些挑战？"
    },
    {
      "id": "第1章-1-27",
      "chapter": 1,
      "question_number": "1-27",
      "content": "请解释操作系统的并发性与硬件支持的并行性有何区别和联系。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "请解释操作系统的并发性与硬件支持的并行性有何区别和联系。"
    },
    {
      "id": "第1章-1-28",
      "chapter": 1,
      "question_number": "1-28",
      "content": "什么是系统调用？它与普通的函数调用（库函数）在执行流程和开销上有何本质区别？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "什么是系统调用？它与普通的函数调用（库函数）在执行流程和开销上有何本质区别？"
    },
    {
      "id": "第1章-1-29",
      "chapter": 1,
      "question_number": "1-29",
      "content": "微内核（Micro-kernel）结构的操作系统设计思想是什么？与单块式内核（Monolithic Kernel）相比，它在可靠性和性能方面各有何优缺点？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "微内核（Micro-kernel）结构的操作系统设计思想是什么？与单块式内核（Monolithic Kernel）相比，它在可靠性和性能方面各有何优缺点？"
    },
    {
      "id": "第1章-1-30",
      "chapter": 1,
      "question_number": "1-30",
      "content": "CPU的特权指令和非特权指令是如何划分的？操作系统是如何利用硬件的两种状态（核心态和用户态）来保证自身安全的？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "CPU的特权指令和非特权指令是如何划分的？操作系统是如何利用硬件的两种状态（核心态和用户态）来保证自身安全的？"
    },
    {
      "id": "第1章-1-31",
      "chapter": 1,
      "question_number": "1-31",
      "content": "网络操作系统和分布式操作系统在设计目标和用户透明性上有何主要区别？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "网络操作系统和分布式操作系统在设计目标和用户透明性上有何主要区别？"
    },
    {
      "id": "第2章-2-1",
      "chapter": 2,
      "question_number": "2-1",
      "content": "何谓进程？试从动态性、并发性和独立性上比较进程与程序。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "何谓进程？试从动态性、并发性和独立性上比较进程与程序。"
    },
    {
      "id": "第2章-2-2",
      "chapter": 2,
      "question_number": "2-2",
      "content": "进程控制块的作用是什么？它主要包括哪几部分内容？ 39 --- 第 50 页 ---",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "进程控制块的作用是什么？它主要包括哪几部分内容？ 39 --- 第 50 页 ---"
    },
    {
      "id": "第2章-2-3",
      "chapter": 2,
      "question_number": "2-3",
      "content": "进程有哪几种基本状态？试举出使进程状态发生变化的事件并描绘它的状态转换图。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "进程有哪几种基本状态？试举出使进程状态发生变化的事件并描绘它的状态转换图。"
    },
    {
      "id": "第2章-2-4",
      "chapter": 2,
      "question_number": "2-4",
      "content": "处理机的调度通常分为几级？它们的主要职能是什么？为什么要引入交换调度？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "处理机的调度通常分为几级？它们的主要职能是什么？为什么要引入交换调度？"
    },
    {
      "id": "第2章-2-5",
      "chapter": 2,
      "question_number": "2-5",
      "content": "试从调度性、并发性、拥有资源及系统开销4个方面对进程和线程进行比较。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "试从调度性、并发性、拥有资源及系统开销4个方面对进程和线程进行比较。"
    },
    {
      "id": "第2章-2-6",
      "chapter": 2,
      "question_number": "2-6",
      "content": "作业调度存在于哪种类型的操作系统中？为什么？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "作业调度存在于哪种类型的操作系统中？为什么？"
    },
    {
      "id": "第2章-2-8",
      "chapter": 2,
      "question_number": "2-8",
      "content": "给定一组作业 J ，J ，…，J 。它们的运行时间分别为 T ，T ，…，T ，假定这些 1 2 n 1 2 n 作业同时到达，并且在一台处理机上按单道方式运行。试证明按最短作业优先算法调度时， 平均周转时间最短。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "给定一组作业 J ，J ，…，J 。它们的运行时间分别为 T ，T ，…，T ，假定这些 1 2 n 1 2 n 作业同时到达，并且在一台处理机上按单道方式运行。试证明按最短作业优先算法调度时， 平均周转时间最短。"
    },
    {
      "id": "第2章-2-10",
      "chapter": 2,
      "question_number": "2-10",
      "content": "下面哪种调度算法可能导致出现进程饿死现象的发生？ A．先来先服务 B．短作业优先 C．轮转法 D．优先级法",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "下面哪种调度算法可能导致出现进程饿死现象的发生？ A．先来先服务 B．短作业优先 C．轮转法 D．优先级法"
    },
    {
      "id": "第2章-2-11",
      "chapter": 2,
      "question_number": "2-11",
      "content": "现有五个批处理作业，它们的到达时间（AT）和运行时间（BT）分别为：J1(0, 8), J2(1, 4), J3(2, 2), J4(3, 1), J5(4, 3)。对于非抢占式的最短作业优先（SJF）调度算法，请计算每个作业的完成时间、周转时间和带权周转时间，并计算平均周转时间和平均带权周转时间。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "现有五个批处理作业，它们的到达时间（AT）和运行时间（BT）分别为：J1(0, 8), J2(1, 4), J3(2, 2), J4(3, 1), J5(4, 3)。对于非抢占式的最短作业优先（SJF）调度算法，请计算每个作业的完成时间、周转时间和带权周转时间，并计算平均周转时间和平均带权周转时间。"
    },
    {
      "id": "第2章-2-12",
      "chapter": 2,
      "question_number": "2-12",
      "content": "对于上一题中的五个作业，如果采用抢占式的最短作业优先（SRTF，最短剩余时间优先）算法，请重新计算每个作业的完成时间和平均周转时间。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "对于上一题中的五个作业，如果采用抢占式的最短作业优先（SRTF，最短剩余时间优先）算法，请重新计算每个作业的完成时间和平均周转时间。"
    },
    {
      "id": "第2章-2-13",
      "chapter": 2,
      "question_number": "2-13",
      "content": "对于第2章-扩充-1中的五个作业，如果采用响应比高者优先（HRN）调度算法，请写出作业的调度顺序并计算平均周转时间。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "对于第2章-扩充-1中的五个作业，如果采用响应比高者优先（HRN）调度算法，请写出作业的调度顺序并计算平均周转时间。"
    },
    {
      "id": "第2章-2-14",
      "chapter": 2,
      "question_number": "2-14",
      "content": "对于第2章-扩充-1中的五个作业，如果采用时间片为2的时间片轮转（Round Robin）调度算法，请画出甘特图，并计算每个作业的等待时间以及平均等待时间。（假设新到达的作业排在当前就绪队列的末尾）",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "对于第2章-扩充-1中的五个作业，如果采用时间片为2的时间片轮转（Round Robin）调度算法，请画出甘特图，并计算每个作业的等待时间以及平均等待时间。（假设新到达的作业排在当前就绪队列的末尾）"
    },
    {
      "id": "第2章-2-15",
      "chapter": 2,
      "question_number": "2-15",
      "content": "在支持线程的操作系统中，为什么线程的创建和上下文切换开销通常远小于进程？请从资源分配和地址空间的角度进行解释。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "在支持线程的操作系统中，为什么线程的创建和上下文切换开销通常远小于进程？请从资源分配和地址空间的角度进行解释。"
    },
    {
      "id": "第2章-2-16",
      "chapter": 2,
      "question_number": "2-16",
      "content": "一个进程从运行态主动转换到阻塞态，通常是由什么原因引起的？而从阻塞态转换到就绪态，是由什么事件触发的？这两个转换的发起者有何不同？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "一个进程从运行态主动转换到阻塞态，通常是由什么原因引起的？而从阻塞态转换到就绪态，是由什么事件触发的？这两个转换的发起者有何不同？"
    },
    {
      "id": "第2章-2-17",
      "chapter": 2,
      "question_number": "2-17",
      "content": "作业调度（高级调度）和进程调度（低级调度）在调度频率、调度对象和主要目标上有何根本区别？为什么分时系统通常没有作业调度？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "作业调度（高级调度）和进程调度（低级调度）在调度频率、调度对象和主要目标上有何根本区别？为什么分时系统通常没有作业调度？"
    },
    {
      "id": "第2章-2-18",
      "chapter": 2,
      "question_number": "2-18",
      "content": "什么是“原语”（Primitive）？为什么说进程的创建、阻塞、唤醒等操作必须由原语实现，以保证操作系统的正确性？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "什么是“原语”（Primitive）？为什么说进程的创建、阻塞、唤醒等操作必须由原语实现，以保证操作系统的正确性？"
    },
    {
      "id": "第2章-2-19",
      "chapter": 2,
      "question_number": "2-19",
      "content": "假设有三个进程P1, P2, P3，它们的优先级分别为8, 10, 9（数值越大优先级越高），运行时间分别为5, 3, 4。它们同时到达。如果采用非抢占式优先级调度，计算平均周转时间。如果采用抢占式优先级调度，请画出甘特图并重新计算平均周转时间。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "假设有三个进程P1, P2, P3，它们的优先级分别为8, 10, 9（数值越大优先级越高），运行时间分别为5, 3, 4。它们同时到达。如果采用非抢占式优先级调度，计算平均周转时间。如果采用抢占式优先级调度，请画出甘特图并重新计算平均周转时间。"
    },
    {
      "id": "第2章-2-20",
      "chapter": 2,
      "question_number": "2-20",
      "content": "非抢占式的最短作业优先（SJF）算法可能导致长作业“饥饿”。请设计一个场景（包含至少3个作业的到达时间和运行时间），具体说明“饥饿”现象是如何发生的。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "非抢占式的最短作业优先（SJF）算法可能导致长作业“饥饿”。请设计一个场景（包含至少3个作业的到达时间和运行时间），具体说明“饥饿”现象是如何发生的。"
    },
    {
      "id": "第2章-2-21",
      "chapter": 2,
      "question_number": "2-21",
      "content": "进程控制块（PCB）中包含了哪些与进程调度相关的信息？请至少列出三项，并说明它们在调度过程中的作用。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "进程控制块（PCB）中包含了哪些与进程调度相关的信息？请至少列出三项，并说明它们在调度过程中的作用。"
    },
    {
      "id": "第2章-2-22",
      "chapter": 2,
      "question_number": "2-22",
      "content": "当一个进程创建了多个线程后，这些线程共享了进程的哪些资源？又有哪些资源是每个线程私有的？这种资源共享模型带来了什么好处和风险？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "当一个进程创建了多个线程后，这些线程共享了进程的哪些资源？又有哪些资源是每个线程私有的？这种资源共享模型带来了什么好处和风险？"
    },
    {
      "id": "第3章-3-1",
      "chapter": 3,
      "question_number": "3-1",
      "content": "并发执行的进程在系统中通常表现为几种关系？各是在什么情况下发生的? 66  --- 第 77 页 ---",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "并发执行的进程在系统中通常表现为几种关系？各是在什么情况下发生的? 66  --- 第 77 页 ---"
    },
    {
      "id": "第3章-3-2",
      "chapter": 3,
      "question_number": "3-2",
      "content": "什么叫临界资源？什么叫临界区？对临界区的使用应符合哪些规则？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "什么叫临界资源？什么叫临界区？对临界区的使用应符合哪些规则？"
    },
    {
      "id": "第3章-3-3",
      "chapter": 3,
      "question_number": "3-3",
      "content": "若信号量S表示某一类资源，则对S执行P、V操作的直观含义是什么？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "若信号量S表示某一类资源，则对S执行P、V操作的直观含义是什么？"
    },
    {
      "id": "第3章-3-4",
      "chapter": 3,
      "question_number": "3-4",
      "content": "在用P、V操作实现进程通信时，应根据什么原则对信号量赋初值?",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "在用P、V操作实现进程通信时，应根据什么原则对信号量赋初值?"
    },
    {
      "id": "第3章-3-5",
      "chapter": 3,
      "question_number": "3-5",
      "content": "程序段 S1、S2、S3 和 S4 之间存在如图 3.14 所示的前序关系。试说明哪些程序 段可以并发执行？ 图3.14 题",
      "has_images": true,
      "matched_images": [
        {
          "path": "extracted_images/fig_3_14_page77.png",
          "type": "figure"
        }
      ],
      "image_count": 1,
      "content_with_images": "程序段 S1、S2、S3 和 S4 之间存在如图 3.14 所示的前序关系。试说明哪些程序 段可以并发执行？ 图3.14 题 [图片: extracted_images/fig_3_14_page77.png]"
    },
    {
      "id": "第3章-3-6",
      "chapter": 3,
      "question_number": "3-6",
      "content": "当进程对信号量 S 执行 P、V 操作时，S 的值发生变化，当 S>0、S=0 和 S<0 时，其物理意义是什么?",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "当进程对信号量 S 执行 P、V 操作时，S 的值发生变化，当 S>0、S=0 和 S<0 时，其物理意义是什么?"
    },
    {
      "id": "第3章-3-7",
      "chapter": 3,
      "question_number": "3-7",
      "content": "设系统有 n+1 个进程，其中有 n 个发送进程和 1 个接收进程。如图 3.15 所示， A ，A ，…，A 通过一个单缓冲区分别不断地向进程 B 发消息，B 不断地取走缓冲区中的 1 2 n 消息，而且必须取走发来的每一个消息。刚开始时，缓冲区为空。试用 P、V 操作正确实现 进程之间的同步。",
      "has_images": true,
      "matched_images": [
        {
          "path": "extracted_images/fig_3_15_page77.png",
          "type": "figure"
        }
      ],
      "image_count": 1,
      "content_with_images": "设系统有 n+1 个进程，其中有 n 个发送进程和 1 个接收进程。如图 3.15 所示， A ，A ，…，A 通过一个单缓冲区分别不断地向进程 B 发消息，B 不断地取走缓冲区中的 1 2 n 消息，而且必须取走发来的每一个消息。刚开始时，缓冲区为空。试用 P、V 操作正确实现 进程之间的同步。 [图片: extracted_images/fig_3_15_page77.png]"
    },
    {
      "id": "第3章-3-8",
      "chapter": 3,
      "question_number": "3-8",
      "content": "有一容量为 100 的循环缓冲区，有多个并发执行进程通过该缓冲区进行通信。为 了正确地管理缓冲区，系统设置了两个读写指针分别为 IN、OUT。IN 和 OUT 的值如何反 映缓冲区为空还是满的情况?",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "有一容量为 100 的循环缓冲区，有多个并发执行进程通过该缓冲区进行通信。为 了正确地管理缓冲区，系统设置了两个读写指针分别为 IN、OUT。IN 和 OUT 的值如何反 映缓冲区为空还是满的情况?"
    },
    {
      "id": "第3章-3-10",
      "chapter": 3,
      "question_number": "3-10",
      "content": "什么是死锁？死锁产生的原因和4个必要条件是什么?",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "什么是死锁？死锁产生的原因和4个必要条件是什么?"
    },
    {
      "id": "第3章-3-11",
      "chapter": 3,
      "question_number": "3-11",
      "content": "如何利用银行家算法判断一个系统的状态是否安全？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "如何利用银行家算法判断一个系统的状态是否安全？"
    },
    {
      "id": "第3章-3-12",
      "chapter": 3,
      "question_number": "3-12",
      "content": "假定系统有 4 个同类资源和 3 个进程，进程每次只申请或释放一个资源。每个 进程最大资源需求量为2。请问，这个系统为什么不会发生死锁?",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "假定系统有 4 个同类资源和 3 个进程，进程每次只申请或释放一个资源。每个 进程最大资源需求量为2。请问，这个系统为什么不会发生死锁?"
    },
    {
      "id": "第3章-3-13",
      "chapter": 3,
      "question_number": "3-13",
      "content": "一个计算机系统有 6 个磁带驱动器，n 个进程，每个进程最多需要两个磁带驱动 器驱动。当n为何值时，系统不会发生死锁?",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "一个计算机系统有 6 个磁带驱动器，n 个进程，每个进程最多需要两个磁带驱动 器驱动。当n为何值时，系统不会发生死锁?"
    },
    {
      "id": "第3章-3-14",
      "chapter": 3,
      "question_number": "3-14",
      "content": "假定系统有N个进程共享M个同类资源，规定每个 进程至少申请一个资源，每个进程的最大需求不超过 M，所有 进程的需求总和小于 M+N。为什么在这种情况下也决不会发 生死锁?试证明。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "假定系统有N个进程共享M个同类资源，规定每个 进程至少申请一个资源，每个进程的最大需求不超过 M，所有 进程的需求总和小于 M+N。为什么在这种情况下也决不会发 生死锁?试证明。"
    },
    {
      "id": "第3章-3-15",
      "chapter": 3,
      "question_number": "3-15",
      "content": "设有 8 个进程 M1，M2，…，M8，它们有如 图 3.16 所示的优先关系，试用 P、V 操作实现这些进程间 的同步。 图3.16 进程之间的优先关系 67 --- 第 78 页 ---",
      "has_images": true,
      "matched_images": [
        {
          "path": "extracted_images/fig_3_16_page77.png",
          "type": "figure"
        }
      ],
      "image_count": 1,
      "content_with_images": "设有 8 个进程 M1，M2，…，M8，它们有如 图 3.16 所示的优先关系，试用 P、V 操作实现这些进程间 的同步。 图3.16 进程之间的优先关系 67 --- 第 78 页 --- [图片: extracted_images/fig_3_16_page77.png]"
    },
    {
      "id": "第3章-3-18",
      "chapter": 3,
      "question_number": "3-18",
      "content": "有一个理发师、一把理发椅和 n 把供等候理发的顾客坐的椅子。如果没有顾 客，则理发师便坐在椅子上睡觉，当一个顾客到来时，必须唤醒理发师，请求理发；如果理 发师正在理发时，又有顾客来到，只要有空椅子，他就坐下来等待，如果没有空椅子，他就 离开。请为理发师和顾客各编写一段程序来描述他们的同步过程。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "有一个理发师、一把理发椅和 n 把供等候理发的顾客坐的椅子。如果没有顾 客，则理发师便坐在椅子上睡觉，当一个顾客到来时，必须唤醒理发师，请求理发；如果理 发师正在理发时，又有顾客来到，只要有空椅子，他就坐下来等待，如果没有空椅子，他就 离开。请为理发师和顾客各编写一段程序来描述他们的同步过程。"
    },
    {
      "id": "第3章-3-22",
      "chapter": 3,
      "question_number": "3-22",
      "content": "图 3.19 的资源分配图中，方框代表资源实体，其内的小圆圈代表实际的资源 数；圆圈代表进程实体。化简该图并说明有无进程处于死锁状态。 图3.19 题",
      "has_images": true,
      "matched_images": [
        {
          "path": "extracted_images/fig_3_19_page79.png",
          "type": "figure"
        }
      ],
      "image_count": 1,
      "content_with_images": "图 3.19 的资源分配图中，方框代表资源实体，其内的小圆圈代表实际的资源 数；圆圈代表进程实体。化简该图并说明有无进程处于死锁状态。 图3.19 题 [图片: extracted_images/fig_3_19_page79.png]"
    },
    {
      "id": "第3章-3-23",
      "chapter": 3,
      "question_number": "3-23",
      "content": "在一个停车场系统中，使用一个计数器`count`表示可用车位数，初始值为N。当一辆车进入时执行`count--`，离开时执行`count++`。请问`count`是否为临界资源？如果两个入口的进程并发执行`count--`，不使用同步互斥机制可能会导致什么具体问题？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "在一个停车场系统中，使用一个计数器`count`表示可用车位数，初始值为N。当一辆车进入时执行`count--`，离开时执行`count++`。请问`count`是否为临界资源？如果两个入口的进程并发执行`count--`，不使用同步互斥机制可能会导致什么具体问题？"
    },
    {
      "id": "第3章-3-24",
      "chapter": 3,
      "question_number": "3-24",
      "content": "使用P、V操作解决互斥问题时，互斥信号量`mutex`的初值为什么必须设置为1？如果误设置为0或2，会分别导致什么后果？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "使用P、V操作解决互斥问题时，互斥信号量`mutex`的初值为什么必须设置为1？如果误设置为0或2，会分别导致什么后果？"
    },
    {
      "id": "第3章-3-25",
      "chapter": 3,
      "question_number": "3-25",
      "content": "在一个经典的生产者-消费者问题中，缓冲区大小为k，设有m个生产者和n个消费者。需要设置几个信号量？它们的名称、作用和初始值分别是什么？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "在一个经典的生产者-消费者问题中，缓冲区大小为k，设有m个生产者和n个消费者。需要设置几个信号量？它们的名称、作用和初始值分别是什么？"
    },
    {
      "id": "第3章-3-26",
      "chapter": 3,
      "question_number": "3-26",
      "content": "在生产者-消费者问题中，如果将生产者代码中的 `P(empty)` 和 `P(mutex)` 两个操作的顺序颠倒，会产生什么后果？请详细分析。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "在生产者-消费者问题中，如果将生产者代码中的 `P(empty)` 和 `P(mutex)` 两个操作的顺序颠倒，会产生什么后果？请详细分析。"
    },
    {
      "id": "第3章-3-27",
      "chapter": 3,
      "question_number": "3-27",
      "content": "某系统有三种资源R1, R2, R3，数量分别为10, 5, 7。在T0时刻，系统中有P0到P4五个进程，其资源分配情况如下。请计算此刻系统的Available（可用）资源向量，并使用安全性算法判断系统是否处于安全状态？如果是，请给出一个安全序列。Allocation(已分配): R1 R2 R3; Max(最大需求): R1 R2 R3; P0: 0 1 0, 7 5 3; P1: 2 0 0, 3 2 2; P2: 3 0 2, 9 0 2; P3: 2 1 1, 2 2 2; P4: 0 0 2, 4 3 3;",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "某系统有三种资源R1, R2, R3，数量分别为10, 5, 7。在T0时刻，系统中有P0到P4五个进程，其资源分配情况如下。请计算此刻系统的Available（可用）资源向量，并使用安全性算法判断系统是否处于安全状态？如果是，请给出一个安全序列。Allocation(已分配): R1 R2 R3; Max(最大需求): R1 R2 R3; P0: 0 1 0, 7 5 3; P1: 2 0 0, 3 2 2; P2: 3 0 2, 9 0 2; P3: 2 1 1, 2 2 2; P4: 0 0 2, 4 3 3;"
    },
    {
      "id": "第3章-3-28",
      "chapter": 3,
      "question_number": "3-28",
      "content": "接上一题的场景，在T0时刻之后，进程P1发出请求Request(1, 0, 2)。请使用银行家算法判断系统是否能将资源分配给P1？请说明详细的判断过程和状态变化。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "接上一题的场景，在T0时刻之后，进程P1发出请求Request(1, 0, 2)。请使用银行家算法判断系统是否能将资源分配给P1？请说明详细的判断过程和状态变化。"
    },
    {
      "id": "第3章-3-29",
      "chapter": 3,
      "question_number": "3-29",
      "content": "破坏死锁的“循环等待”条件可以通过资源有序分配法实现。请设计一个场景，说明即使资源总数充足，若两个进程不遵守资源申请顺序，也可能导致死锁。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "破坏死锁的“循环等待”条件可以通过资源有序分配法实现。请设计一个场景，说明即使资源总数充足，若两个进程不遵守资源申请顺序，也可能导致死锁。"
    },
    {
      "id": "第3章-3-30",
      "chapter": 3,
      "question_number": "3-30",
      "content": "什么是系统的安全状态？不安全状态是否一定会导致死锁？请解释原因。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "什么是系统的安全状态？不安全状态是否一定会导致死锁？请解释原因。"
    },
    {
      "id": "第3章-3-31",
      "chapter": 3,
      "question_number": "3-31",
      "content": "基于原题3-13的场景，如果系统有m个磁带驱动器，n个进程，每个进程最多需要k个驱动器。请给出一个保证系统不发生死锁的通用条件（m, n, k之间的关系），并进行证明。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "基于原题3-13的场景，如果系统有m个磁带驱动器，n个进程，每个进程最多需要k个驱动器。请给出一个保证系统不发生死锁的通用条件（m, n, k之间的关系），并进行证明。"
    },
    {
      "id": "第3章-3-32",
      "chapter": 3,
      "question_number": "3-32",
      "content": "简述死锁检测的基本思想，以及检测到死锁后通常采用的两种恢复策略：进程终止和资源剥夺。这两种策略各有何优缺点？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "简述死锁检测的基本思想，以及检测到死锁后通常采用的两种恢复策略：进程终止和资源剥夺。这两种策略各有何优缺点？"
    },
    {
      "id": "第3章-3-33",
      "chapter": 3,
      "question_number": "3-33",
      "content": "在读者-写者问题中，“读者优先”策略可能导致写者“饥饿”。请设计一个场景（描述读者和写者到达的序列）来说明这种“饥饿”是如何发生的。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "在读者-写者问题中，“读者优先”策略可能导致写者“饥饿”。请设计一个场景（描述读者和写者到达的序列）来说明这种“饥饿”是如何发生的。"
    },
    {
      "id": "第3章-3-34",
      "chapter": 3,
      "question_number": "3-34",
      "content": "管程（Monitor）是如何实现进程同步的？请解释其内部的条件变量（Condition Variables）及其`wait()`和`signal()`操作的原理。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "管程（Monitor）是如何实现进程同步的？请解释其内部的条件变量（Condition Variables）及其`wait()`和`signal()`操作的原理。"
    },
    {
      "id": "第3章-3-35",
      "chapter": 3,
      "question_number": "3-35",
      "content": "考虑哲学家就餐问题，如果有5个哲学家，请问最多可以有多少个哲学家同时拿起左手的叉子而又不发生死锁？如果规定只有同时拿到左右两支叉子才能拿起，而不是先左后右，能否避免死锁？为什么？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "考虑哲学家就餐问题，如果有5个哲学家，请问最多可以有多少个哲学家同时拿起左手的叉子而又不发生死锁？如果规定只有同时拿到左右两支叉子才能拿起，而不是先左后右，能否避免死锁？为什么？"
    },
    {
      "id": "第3章-3-36",
      "chapter": 3,
      "question_number": "3-36",
      "content": "如果一个资源分配图中没有环路，是否可以断定系统没有发生死锁？如果图中存在环路，是否一定发生了死锁？请分别解释。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "如果一个资源分配图中没有环路，是否可以断定系统没有发生死锁？如果图中存在环路，是否一定发生了死锁？请分别解释。"
    },
    {
      "id": "第3章-3-37",
      "chapter": 3,
      "question_number": "3-37",
      "content": "进程高级通信中的共享内存机制是最高效的方式之一，但它需要通信进程自行解决同步问题。请问如果不加同步控制，两个进程同时对共享内存中的同一个数据单元进行写操作，可能会发生什么问题？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "进程高级通信中的共享内存机制是最高效的方式之一，但它需要通信进程自行解决同步问题。请问如果不加同步控制，两个进程同时对共享内存中的同一个数据单元进行写操作，可能会发生什么问题？"
    },
    {
      "id": "第4章-4-1",
      "chapter": 4,
      "question_number": "4-1",
      "content": "解释下列术语：名字空间、地址空间、存储空间、逻辑地址、线性地址、物理地址。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "解释下列术语：名字空间、地址空间、存储空间、逻辑地址、线性地址、物理地址。"
    },
    {
      "id": "第4章-4-2",
      "chapter": 4,
      "question_number": "4-2",
      "content": "什么是地址重定位？它分为哪两种？各是依据什么实现的？试比较它们的优缺点。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "什么是地址重定位？它分为哪两种？各是依据什么实现的？试比较它们的优缺点。"
    },
    {
      "id": "第4章-4-3",
      "chapter": 4,
      "question_number": "4-3",
      "content": "存储器管理的主要功能是什么？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "存储器管理的主要功能是什么？"
    },
    {
      "id": "第4章-4-4",
      "chapter": 4,
      "question_number": "4-4",
      "content": "存储保护的目的是什么？对各种存储器管理方案实现存储保护时，硬件和软件各 需做什么工作？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "存储保护的目的是什么？对各种存储器管理方案实现存储保护时，硬件和软件各 需做什么工作？"
    },
    {
      "id": "第4章-4-6",
      "chapter": 4,
      "question_number": "4-6",
      "content": "什么是覆盖？什么是交换？两者之间有什么相同点和不同点？覆盖管理与虚存管 理技术有什么相同点和不同点？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "什么是覆盖？什么是交换？两者之间有什么相同点和不同点？覆盖管理与虚存管 理技术有什么相同点和不同点？"
    },
    {
      "id": "第4章-4-7",
      "chapter": 4,
      "question_number": "4-7",
      "content": "简述页式管理的地址变换过程。它需要什么硬件和软件支持?",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "简述页式管理的地址变换过程。它需要什么硬件和软件支持?"
    },
    {
      "id": "第4章-4-9",
      "chapter": 4,
      "question_number": "4-9",
      "content": "段式存储器管理有什么优点？它与页式管理的主要区别是什么?",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "段式存储器管理有什么优点？它与页式管理的主要区别是什么?"
    },
    {
      "id": "第4章-4-10",
      "chapter": 4,
      "question_number": "4-10",
      "content": "叙述虚拟存储器的基本原理。虚拟存储器的容量能大于主存容量加辅存容量 之和吗?",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "叙述虚拟存储器的基本原理。虚拟存储器的容量能大于主存容量加辅存容量 之和吗?"
    },
    {
      "id": "第4章-4-11",
      "chapter": 4,
      "question_number": "4-11",
      "content": "叙述产生缺页中断时，系统应做哪些工作?",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "叙述产生缺页中断时，系统应做哪些工作?"
    },
    {
      "id": "第4章-4-12",
      "chapter": 4,
      "question_number": "4-12",
      "content": "如果主存中某页正在与外围设备交换信息，那么当发生缺页中断时，可以将这 一页淘汰吗?为什么?",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "如果主存中某页正在与外围设备交换信息，那么当发生缺页中断时，可以将这 一页淘汰吗?为什么?"
    },
    {
      "id": "第4章-4-13",
      "chapter": 4,
      "question_number": "4-13",
      "content": "什么叫系统抖动？工作集模型如何防止系统抖动?",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "什么叫系统抖动？工作集模型如何防止系统抖动?"
    },
    {
      "id": "第4章-4-16",
      "chapter": 4,
      "question_number": "4-16",
      "content": "一个进程在执行过程中，按如下顺序依次访问各页，进程分得四个主存块，问 分别采用 FIFO、LRU 和 OPT 算法时，要产生多少次缺页中断？设进程开始运行时，主存 没有页面。页访问串顺序为：0，1，7，2，3，2，7，1，0，3，2，5，1，7。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "一个进程在执行过程中，按如下顺序依次访问各页，进程分得四个主存块，问 分别采用 FIFO、LRU 和 OPT 算法时，要产生多少次缺页中断？设进程开始运行时，主存 没有页面。页访问串顺序为：0，1，7，2，3，2，7，1，0，3，2，5，1，7。"
    },
    {
      "id": "第4章-4-18",
      "chapter": 4,
      "question_number": "4-18",
      "content": "一台计算机含有65536B的存储空间，这一空间被分成许多长度为4096B的页。 有一程序，其代码段为 32768B，数据段为 16386B，栈段为 15870B。试问该机器的主存空 间适合这个进程吗？如果每页改成512B，适合吗？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "一台计算机含有65536B的存储空间，这一空间被分成许多长度为4096B的页。 有一程序，其代码段为 32768B，数据段为 16386B，栈段为 15870B。试问该机器的主存空 间适合这个进程吗？如果每页改成512B，适合吗？"
    },
    {
      "id": "第4章-4-21",
      "chapter": 4,
      "question_number": "4-21",
      "content": "一个请求分页系统中，内存的读写周期为 8ns，当配置有快表时，查快表需要 1ns，内外存之间传送一个页面的平均时间为 5000ns。假定快表的命中率为 75%，页面失效 率为10%，求内存的有效存取时间。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "一个请求分页系统中，内存的读写周期为 8ns，当配置有快表时，查快表需要 1ns，内外存之间传送一个页面的平均时间为 5000ns。假定快表的命中率为 75%，页面失效 率为10%，求内存的有效存取时间。"
    },
    {
      "id": "第4章-4-22",
      "chapter": 4,
      "question_number": "4-22",
      "content": "设计一个页表应考虑哪些因素？选择页大小时应考虑哪些因素？现代操作系统 为什么采用多级页表？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "设计一个页表应考虑哪些因素？选择页大小时应考虑哪些因素？现代操作系统 为什么采用多级页表？"
    },
    {
      "id": "第4章-4-23",
      "chapter": 4,
      "question_number": "4-23",
      "content": "某计算机的 CPU 的地址长度为 64 位，若页的大小为 8192B，页表项占 4B。要 求一个页表的信息应该放在一个页中。问采用几级页表比较好？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "某计算机的 CPU 的地址长度为 64 位，若页的大小为 8192B，页表项占 4B。要 求一个页表的信息应该放在一个页中。问采用几级页表比较好？"
    },
    {
      "id": "第4章-4-24",
      "chapter": 4,
      "question_number": "4-24",
      "content": "给出段式虚拟存储器管理实现地址变换的流程图。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "给出段式虚拟存储器管理实现地址变换的流程图。"
    },
    {
      "id": "第4章-4-25",
      "chapter": 4,
      "question_number": "4-25",
      "content": "什么是写时复制技术？它有什么好处？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "什么是写时复制技术？它有什么好处？"
    },
    {
      "id": "第4章-4-26",
      "chapter": 4,
      "question_number": "4-26",
      "content": "解释下列术语：程序的局部性原理、动态链接。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "解释下列术语：程序的局部性原理、动态链接。"
    },
    {
      "id": "第4章-4-27",
      "chapter": 4,
      "question_number": "4-27",
      "content": "本章共介绍了 10 种存储器管理方案，请指出每一种方案有哪些特点？存在哪些 问题？后一种方案对前一种方案进行了改进，系统增加了哪些软硬件开销？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "本章共介绍了 10 种存储器管理方案，请指出每一种方案有哪些特点？存在哪些 问题？后一种方案对前一种方案进行了改进，系统增加了哪些软硬件开销？"
    },
    {
      "id": "第4章-4-28",
      "chapter": 4,
      "question_number": "4-28",
      "content": "在可变分区存储管理中，为什么“最佳适应”算法虽然看似最节省空间，但从长远来看却可能导致系统中产生更多难以利用的小碎片（外碎片）？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "在可变分区存储管理中，为什么“最佳适应”算法虽然看似最节省空间，但从长远来看却可能导致系统中产生更多难以利用的小碎片（外碎片）？"
    },
    {
      "id": "第4章-4-29",
      "chapter": 4,
      "question_number": "4-29",
      "content": "页式存储管理通过将进程分散到不连续的物理块中，解决了外碎片问题，但它是否完全消除了内存浪费？请解释页式管理中必然存在的另一种空间浪费（内碎片）及其产生原因。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "页式存储管理通过将进程分散到不连续的物理块中，解决了外碎片问题，但它是否完全消除了内存浪费？请解释页式管理中必然存在的另一种空间浪费（内碎片）及其产生原因。"
    },
    {
      "id": "第4章-4-30",
      "chapter": 4,
      "question_number": "4-30",
      "content": "为什么说段式存储管理比页式存储管理更有利于实现程序和数据的共享和保护？请从地址空间的维度和逻辑独立性上进行分析。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "为什么说段式存储管理比页式存储管理更有利于实现程序和数据的共享和保护？请从地址空间的维度和逻辑独立性上进行分析。"
    },
    {
      "id": "第4章-4-31",
      "chapter": 4,
      "question_number": "4-31",
      "content": "在请求分页系统中，如果一个页面的“修改位”（Dirty Bit）为0，当需要淘汰该页面时，操作系统可以采取什么优化措施来加快处理速度？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "在请求分页系统中，如果一个页面的“修改位”（Dirty Bit）为0，当需要淘汰该页面时，操作系统可以采取什么优化措施来加快处理速度？"
    },
    {
      "id": "第4章-4-32",
      "chapter": 4,
      "question_number": "4-32",
      "content": "工作集模型是如何用于防止系统“抖动”的？如果一个进程的工作集大小超过了分配给它的物理页框数，系统会发生什么？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "工作集模型是如何用于防止系统“抖动”的？如果一个进程的工作集大小超过了分配给它的物理页框数，系统会发生什么？"
    },
    {
      "id": "第4章-4-33",
      "chapter": 4,
      "question_number": "4-33",
      "content": "对于原题4-16中的页访问序列：0, 1, 7, 2, 3, 2, 7, 1, 0, 3, 2, 5, 1, 7，假设分配给进程的物理页框数为4，请计算使用OPT（最佳）页面置换算法时的缺页中断次数。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "对于原题4-16中的页访问序列：0, 1, 7, 2, 3, 2, 7, 1, 0, 3, 2, 5, 1, 7，假设分配给进程的物理页框数为4，请计算使用OPT（最佳）页面置换算法时的缺页中断次数。"
    },
    {
      "id": "第4章-4-34",
      "chapter": 4,
      "question_number": "4-34",
      "content": "考虑一个页访问序列：1, 2, 3, 4, 1, 2, 5, 1, 2, 3, 4, 5。当分配的物理页框数分别为3和4时，请分别计算使用FIFO页面置换算法的缺页次数。这个结果是否体现了Belady异常？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "考虑一个页访问序列：1, 2, 3, 4, 1, 2, 5, 1, 2, 3, 4, 5。当分配的物理页框数分别为3和4时，请分别计算使用FIFO页面置换算法的缺页次数。这个结果是否体现了Belady异常？"
    },
    {
      "id": "第4章-4-35",
      "chapter": 4,
      "question_number": "4-35",
      "content": "某分页系统的逻辑地址为32位，页面大小为4KB，页表项大小为4字节。请问：1) 逻辑地址如何划分为页号和页内偏移？2) 如果采用一级页表，一个进程的页表最大需要占用多少内存空间？3) 如果采用二级页表，且顶级页表和二级页表都恰好占用一个页面，逻辑地址应如何划分？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "某分页系统的逻辑地址为32位，页面大小为4KB，页表项大小为4字节。请问：1) 逻辑地址如何划分为页号和页内偏移？2) 如果采用一级页表，一个进程的页表最大需要占用多少内存空间？3) 如果采用二级页表，且顶级页表和二级页表都恰好占用一个页面，逻辑地址应如何划分？"
    },
    {
      "id": "第4章-4-36",
      "chapter": 4,
      "question_number": "4-36",
      "content": "在一个请求分页系统中，内存访问时间为100纳秒，快表（TLB）访问时间为20纳秒，缺页中断处理时间为8毫秒（8,000,000纳秒），其中包含将替换页写回磁盘的时间。如果快表命中率为98%，缺页率为0.01%，且被替换的页中有30%是“脏”的，请计算系统的有效内存访问时间（EAT）。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "在一个请求分页系统中，内存访问时间为100纳秒，快表（TLB）访问时间为20纳秒，缺页中断处理时间为8毫秒（8,000,000纳秒），其中包含将替换页写回磁盘的时间。如果快表命中率为98%，缺页率为0.01%，且被替换的页中有30%是“脏”的，请计算系统的有效内存访问时间（EAT）。"
    },
    {
      "id": "第4章-4-37",
      "chapter": 4,
      "question_number": "4-37",
      "content": "选择页面大小时需要权衡哪些因素？假设一个进程平均大小为1MB，页表项大小为8字节，请分别计算当页面大小为1KB和16KB时，页表开销和平均内部碎片开销的总和，并比较哪种更优。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "选择页面大小时需要权衡哪些因素？假设一个进程平均大小为1MB，页表项大小为8字节，请分别计算当页面大小为1KB和16KB时，页表开销和平均内部碎片开销的总和，并比较哪种更优。"
    },
    {
      "id": "第4章-4-38",
      "chapter": 4,
      "question_number": "4-38",
      "content": "在一个分段存储管理系统中，段表内容如下：段0(基址219, 长度600)，段1(基址2300, 长度14)，段2(基址90, 长度100)，段3(基址1327, 长度580)，段4(基址1952, 长度96)。对于逻辑地址 (2, 78) 和 (4, 100)，请分别计算出对应的物理地址，或指出地址越界错误。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "在一个分段存储管理系统中，段表内容如下：段0(基址219, 长度600)，段1(基址2300, 长度14)，段2(基址90, 长度100)，段3(基址1327, 长度580)，段4(基址1952, 长度96)。对于逻辑地址 (2, 78) 和 (4, 100)，请分别计算出对应的物理地址，或指出地址越界错误。"
    },
    {
      "id": "第4章-4-39",
      "chapter": 4,
      "question_number": "4-39",
      "content": "在一个分页存储管理系统中，页面大小为1KB。已知逻辑地址1025对应的物理地址为8193。请问逻辑地址2050对应的物理地址是多少？（假设逻辑地址1025和2050属于同一个进程且该进程的页表已建立）",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "在一个分页存储管理系统中，页面大小为1KB。已知逻辑地址1025对应的物理地址为8193。请问逻辑地址2050对应的物理地址是多少？（假设逻辑地址1025和2050属于同一个进程且该进程的页表已建立）"
    },
    {
      "id": "第4章-4-40",
      "chapter": 4,
      "question_number": "4-40",
      "content": "在一个段页式存储管理系统中，逻辑地址由段号、页号和页内偏移组成。假设段表和页表信息如下：段0的页表始址在内存块5；进程的段表内容为：段0（页表长度3，页表始址...）。段0的页表内容为：页0->块8, 页1->块12, 页2->块2。若页面大小为1KB，逻辑地址(0, 1, 500)对应的物理地址是多少？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "在一个段页式存储管理系统中，逻辑地址由段号、页号和页内偏移组成。假设段表和页表信息如下：段0的页表始址在内存块5；进程的段表内容为：段0（页表长度3，页表始址...）。段0的页表内容为：页0->块8, 页1->块12, 页2->块2。若页面大小为1KB，逻辑地址(0, 1, 500)对应的物理地址是多少？"
    },
    {
      "id": "第4章-4-41",
      "chapter": 4,
      "question_number": "4-41",
      "content": "写时复制（Copy-on-Write）技术在`fork()`系统调用中是如何工作的？它如何优化进程创建的效率？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "写时复制（Copy-on-Write）技术在`fork()`系统调用中是如何工作的？它如何优化进程创建的效率？"
    },
    {
      "id": "第4章-4-42",
      "chapter": 4,
      "question_number": "4-42",
      "content": "交换（Swapping）和请求调页（Demand Paging）都可以实现内存扩充，但它们在换入换出单位、发生时机和系统开销上有何主要区别？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "交换（Swapping）和请求调页（Demand Paging）都可以实现内存扩充，但它们在换入换出单位、发生时机和系统开销上有何主要区别？"
    },
    {
      "id": "第5章-5-1",
      "chapter": 5,
      "question_number": "5-1",
      "content": "什么是文件?",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "什么是文件?"
    },
    {
      "id": "第5章-5-2",
      "chapter": 5,
      "question_number": "5-2",
      "content": "什么是文件系统?",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "什么是文件系统?"
    },
    {
      "id": "第5章-5-3",
      "chapter": 5,
      "question_number": "5-3",
      "content": "文件在文件存储器上有几种组织形式?对于不同的组织形式，文件系统是如何进行 管理的?",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "文件在文件存储器上有几种组织形式?对于不同的组织形式，文件系统是如何进行 管理的?"
    },
    {
      "id": "第5章-5-4",
      "chapter": 5,
      "question_number": "5-4",
      "content": "文件目录的作用是什么？文件目录项通常包含哪些内容?",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "文件目录的作用是什么？文件目录项通常包含哪些内容?"
    },
    {
      "id": "第5章-5-5",
      "chapter": 5,
      "question_number": "5-5",
      "content": "文件存储空间的管理方法有几种？它们各是如何实现文件存储空间的分配和回收 的？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "文件存储空间的管理方法有几种？它们各是如何实现文件存储空间的分配和回收 的？"
    },
    {
      "id": "第5章-5-6",
      "chapter": 5,
      "question_number": "5-6",
      "content": "建立多级目录有哪些好处?文件的重名和共享问题是如何得到解决的?",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "建立多级目录有哪些好处?文件的重名和共享问题是如何得到解决的?"
    },
    {
      "id": "第5章-5-7",
      "chapter": 5,
      "question_number": "5-7",
      "content": "文件系统中，使用打开和关闭文件命令的目的是什么?它们的具体功能是什么?",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "文件系统中，使用打开和关闭文件命令的目的是什么?它们的具体功能是什么?"
    },
    {
      "id": "第5章-5-8",
      "chapter": 5,
      "question_number": "5-8",
      "content": "一个支持单级目录的操作系统，允许有任意多个文件和任意长的文件名，能否把 它近似模拟成多级目录的文件系统?如何模拟?",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "一个支持单级目录的操作系统，允许有任意多个文件和任意长的文件名，能否把 它近似模拟成多级目录的文件系统?如何模拟?"
    },
    {
      "id": "第5章-5-9",
      "chapter": 5,
      "question_number": "5-9",
      "content": "文件存储空间管理可采用成组自由块链表或位示图。若一磁盘有 B 个盘块，其中 有 F 个自由块，盘空间用 D 位表示。试给出使用自由块链表比使用位示图占用更少的空间 的条件。当D为16时，给出满足条件的自由空间占整个空间的百分比。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "文件存储空间管理可采用成组自由块链表或位示图。若一磁盘有 B 个盘块，其中 有 F 个自由块，盘空间用 D 位表示。试给出使用自由块链表比使用位示图占用更少的空间 的条件。当D为16时，给出满足条件的自由空间占整个空间的百分比。"
    },
    {
      "id": "第5章-5-10",
      "chapter": 5,
      "question_number": "5-10",
      "content": "文件系统的执行速度依赖于缓冲池中找到盘块的比率。假设盘块从缓冲池读出 用 1ms，从盘上读出用 40ms，从缓冲池找到盘块的比率为 n，请给出一个公式计算读盘块 的平均时间，并画出n从0到1.0的函数图像。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "文件系统的执行速度依赖于缓冲池中找到盘块的比率。假设盘块从缓冲池读出 用 1ms，从盘上读出用 40ms，从缓冲池找到盘块的比率为 n，请给出一个公式计算读盘块 的平均时间，并画出n从0到1.0的函数图像。"
    },
    {
      "id": "第5章-5-12",
      "chapter": 5,
      "question_number": "5-12",
      "content": "试比较空白块链和成组链接的分配和回收算法的优缺点。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "试比较空白块链和成组链接的分配和回收算法的优缺点。"
    },
    {
      "id": "第5章-5-13",
      "chapter": 5,
      "question_number": "5-13",
      "content": "磁盘上有一个链接文件 A。它有 10 个记录，每个记录的长度为 256B，存放在 5 个磁盘块中，如图5.19所示。若要访问该文件的第1574字节数 物 理 块 号 链 接 指 针 据，应该访问哪个磁盘块？要访问几次磁盘才能将该字节的内 5 7 容读出。 7 14",
      "has_images": true,
      "matched_images": [
        {
          "path": "extracted_images/fig_5_19_page133.png",
          "type": "figure"
        }
      ],
      "image_count": 1,
      "content_with_images": "磁盘上有一个链接文件 A。它有 10 个记录，每个记录的长度为 256B，存放在 5 个磁盘块中，如图5.19所示。若要访问该文件的第1574字节数 物 理 块 号 链 接 指 针 据，应该访问哪个磁盘块？要访问几次磁盘才能将该字节的内 5 7 容读出。 7 14 [图片: extracted_images/fig_5_19_page133.png]"
    },
    {
      "id": "第5章-5-14",
      "chapter": 5,
      "question_number": "5-14",
      "content": "一个文件系统中，当前只有根目录被缓存到主存。 14 4 假定所有目录文件都只占用一个磁盘块。那么要打开文件 4 10 /usr/lim/course/os/result.txt，共需要多少次磁盘操作？ 10 0",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "一个文件系统中，当前只有根目录被缓存到主存。 14 4 假定所有目录文件都只占用一个磁盘块。那么要打开文件 4 10 /usr/lim/course/os/result.txt，共需要多少次磁盘操作？ 10 0"
    },
    {
      "id": "第5章-5-15",
      "chapter": 5,
      "question_number": "5-15",
      "content": "一个文件系统采用索引结构来组织文件，且索引表 图5.19 习题",
      "has_images": true,
      "matched_images": [
        {
          "path": "extracted_images/fig_5_19_page133.png",
          "type": "figure"
        }
      ],
      "image_count": 1,
      "content_with_images": "一个文件系统采用索引结构来组织文件，且索引表 图5.19 习题 [图片: extracted_images/fig_5_19_page133.png]"
    },
    {
      "id": "第5章-5-16",
      "chapter": 5,
      "question_number": "5-16",
      "content": "某文件系统采用类似UNIX的i-node结构，其中i-node包含10个直接块地址、1个一级间接块地址和1个二级间接块地址。如果磁盘块大小为4KB，每个块地址占4字节，请计算该文件系统支持的最大文件大小是多少？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "某文件系统采用类似UNIX的i-node结构，其中i-node包含10个直接块地址、1个一级间接块地址和1个二级间接块地址。如果磁盘块大小为4KB，每个块地址占4字节，请计算该文件系统支持的最大文件大小是多少？"
    },
    {
      "id": "第5章-5-17",
      "chapter": 5,
      "question_number": "5-17",
      "content": "接上一题的场景，如果要访问一个大小为50KB的文件，需要访问多少个磁盘块（包括数据块和所有必要的索引块）？请说明你的计算过程。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "接上一题的场景，如果要访问一个大小为50KB的文件，需要访问多少个磁盘块（包括数据块和所有必要的索引块）？请说明你的计算过程。"
    },
    {
      "id": "第5章-5-18",
      "chapter": 5,
      "question_number": "5-18",
      "content": "一个磁盘的容量为100GB，物理块大小为4KB。如果采用位示图来管理空闲空间，请计算该位示图本身需要占用多少存储空间（以KB为单位）？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "一个磁盘的容量为100GB，物理块大小为4KB。如果采用位示图来管理空闲空间，请计算该位示图本身需要占用多少存储空间（以KB为单位）？"
    },
    {
      "id": "第5章-5-19",
      "chapter": 5,
      "question_number": "5-19",
      "content": "假设一个文件系统采用链接分配（文件分配表FAT）方式。文件A由物理块 4 -> 7 -> 2 -> 10 组成，每个物理块大小为1KB。如果要读取逻辑字节地址为2500处的数据，需要访问哪个物理块？总共需要访问几次FAT表（假设FAT表已在内存中）？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "假设一个文件系统采用链接分配（文件分配表FAT）方式。文件A由物理块 4 -> 7 -> 2 -> 10 组成，每个物理块大小为1KB。如果要读取逻辑字节地址为2500处的数据，需要访问哪个物理块？总共需要访问几次FAT表（假设FAT表已在内存中）？"
    },
    {
      "id": "第5章-5-20",
      "chapter": 5,
      "question_number": "5-20",
      "content": "基于原题5-14的场景，如果要读取文件 `/usr/lim/course/os/result.txt` 的第一个数据块，总共需要多少次磁盘I/O操作？请说明每次操作的目的。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "基于原题5-14的场景，如果要读取文件 `/usr/lim/course/os/result.txt` 的第一个数据块，总共需要多少次磁盘I/O操作？请说明每次操作的目的。"
    },
    {
      "id": "第5章-5-21",
      "chapter": 5,
      "question_number": "5-21",
      "content": "文件系统中，为什么将文件控制块（FCB）与文件数据分开存储（如inode和数据块）比将它们混合存储更具优势？请从文件操作效率和存储空间利用率两方面分析。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "文件系统中，为什么将文件控制块（FCB）与文件数据分开存储（如inode和数据块）比将它们混合存储更具优势？请从文件操作效率和存储空间利用率两方面分析。"
    },
    {
      "id": "第5章-5-22",
      "chapter": 5,
      "question_number": "5-22",
      "content": "硬链接（Hard Link）和符号链接（Symbolic Link）在实现文件共享时有何本质区别？如果删除了原始文件，对这两种链接分别会产生什么影响？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "硬链接（Hard Link）和符号链接（Symbolic Link）在实现文件共享时有何本质区别？如果删除了原始文件，对这两种链接分别会产生什么影响？"
    },
    {
      "id": "第5章-5-23",
      "chapter": 5,
      "question_number": "5-23",
      "content": "什么是存储器映射文件（Memory-mapped File）？它相比于传统的文件读写方式（如read/write系统调用），在数据复制和系统开销方面有何优势？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "什么是存储器映射文件（Memory-mapped File）？它相比于传统的文件读写方式（如read/write系统调用），在数据复制和系统开销方面有何优势？"
    },
    {
      "id": "第5章-5-24",
      "chapter": 5,
      "question_number": "5-24",
      "content": "文件存储空间管理中，成组链接法相比于简单的空闲块链法，在分配和回收大量空闲块时效率为何更高？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "文件存储空间管理中，成组链接法相比于简单的空闲块链法，在分配和回收大量空闲块时效率为何更高？"
    },
    {
      "id": "第5章-5-25",
      "chapter": 5,
      "question_number": "5-25",
      "content": "文件系统中，绝对路径和相对路径有什么区别？引入“当前工作目录”的概念有什么实际好处？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "文件系统中，绝对路径和相对路径有什么区别？引入“当前工作目录”的概念有什么实际好处？"
    },
    {
      "id": "第5章-5-26",
      "chapter": 5,
      "question_number": "5-26",
      "content": "假设一个文件的逻辑记录大小为100字节，物理块大小为512字节。如果采用记录的组块技术，块因子是多少？读取第12个逻辑记录时，需要读入第几个物理块？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "假设一个文件的逻辑记录大小为100字节，物理块大小为512字节。如果采用记录的组块技术，块因子是多少？读取第12个逻辑记录时，需要读入第几个物理块？"
    },
    {
      "id": "第5章-5-27",
      "chapter": 5,
      "question_number": "5-27",
      "content": "在文件系统中，打开（open）操作的实质是什么？为什么在读写文件之前通常需要先执行打开操作，而不是每次读写都提供完整路径名？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "在文件系统中，打开（open）操作的实质是什么？为什么在读写文件之前通常需要先执行打开操作，而不是每次读写都提供完整路径名？"
    },
    {
      "id": "第6章-6-1",
      "chapter": 6,
      "question_number": "6-1",
      "content": "设备管理的主要目的是什么?",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "设备管理的主要目的是什么?"
    },
    {
      "id": "第6章-6-2",
      "chapter": 6,
      "question_number": "6-2",
      "content": "设备独立性的含义是什么?",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "设备独立性的含义是什么?"
    },
    {
      "id": "第6章-6-3",
      "chapter": 6,
      "question_number": "6-3",
      "content": "从信息的组织角度看，可将设备分成哪些类型? 各类设备的物理特性是什么?",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "从信息的组织角度看，可将设备分成哪些类型? 各类设备的物理特性是什么?"
    },
    {
      "id": "第6章-6-4",
      "chapter": 6,
      "question_number": "6-4",
      "content": "从分配角度看，设备有独占型、共享型和虚拟型设备。什么是虚拟型设备？各自 的分配策略有何不同？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "从分配角度看，设备有独占型、共享型和虚拟型设备。什么是虚拟型设备？各自 的分配策略有何不同？"
    },
    {
      "id": "第6章-6-5",
      "chapter": 6,
      "question_number": "6-5",
      "content": "同步I/O和异步I/O的区别是什么？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "同步I/O和异步I/O的区别是什么？"
    },
    {
      "id": "第6章-6-7",
      "chapter": 6,
      "question_number": "6-7",
      "content": "打印机的输出文件为什么通常要在打印前假脱机到磁盘上?",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "打印机的输出文件为什么通常要在打印前假脱机到磁盘上?"
    },
    {
      "id": "第6章-6-8",
      "chapter": 6,
      "question_number": "6-8",
      "content": "通道有几种类型?它们之间的区别是什么?",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "通道有几种类型?它们之间的区别是什么?"
    },
    {
      "id": "第6章-6-9",
      "chapter": 6,
      "question_number": "6-9",
      "content": "引入缓冲技术的目的是什么？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "引入缓冲技术的目的是什么？"
    },
    {
      "id": "第6章-6-10",
      "chapter": 6,
      "question_number": "6-10",
      "content": "试叙述Spooling设置的目的？它由几部分组成？各部分实现的功能是什么？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "试叙述Spooling设置的目的？它由几部分组成？各部分实现的功能是什么？"
    },
    {
      "id": "第6章-6-11",
      "chapter": 6,
      "question_number": "6-11",
      "content": "根据设备的控制方式的不同，主存与设备之间的数据传输控制方式有几种？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "根据设备的控制方式的不同，主存与设备之间的数据传输控制方式有几种？"
    },
    {
      "id": "第6章-6-12",
      "chapter": 6,
      "question_number": "6-12",
      "content": "假定一个硬盘有 100 个柱面，每个柱面有 10 个磁道，每个磁道有 15 个扇区。 当进程要访问磁盘的12345扇区时，计算磁盘的三维物理扇区号。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "假定一个硬盘有 100 个柱面，每个柱面有 10 个磁道，每个磁道有 15 个扇区。 当进程要访问磁盘的12345扇区时，计算磁盘的三维物理扇区号。"
    },
    {
      "id": "第6章-6-15",
      "chapter": 6,
      "question_number": "6-15",
      "content": "某系统文件存储空间共有 80 个柱面，20 道/柱面，6 块/磁道，每块有 1KB。用 位示图表示。每张位示图 64 个字，其中有 4 个字包含的是控制信息。位示图中的位若为 1，表示占用；为0表示空闲。试给出分配和回收一个盘块的计算公式。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "某系统文件存储空间共有 80 个柱面，20 道/柱面，6 块/磁道，每块有 1KB。用 位示图表示。每张位示图 64 个字，其中有 4 个字包含的是控制信息。位示图中的位若为 1，表示占用；为0表示空闲。试给出分配和回收一个盘块的计算公式。"
    },
    {
      "id": "第6章-6-17",
      "chapter": 6,
      "question_number": "6-17",
      "content": "什么是独立磁盘的冗余阵列?它分为几级？各有什么特色？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "什么是独立磁盘的冗余阵列?它分为几级？各有什么特色？"
    },
    {
      "id": "第6章-6-19",
      "chapter": 6,
      "question_number": "6-19",
      "content": "在 I/O 系统中，出现数据传输完毕、设备出错、设备正在传输数据、指令错、缺 页错等事件中，哪些会引起I/O中断？为什么？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "在 I/O 系统中，出现数据传输完毕、设备出错、设备正在传输数据、指令错、缺 页错等事件中，哪些会引起I/O中断？为什么？"
    },
    {
      "id": "第6章-6-20",
      "chapter": 6,
      "question_number": "6-20",
      "content": "假设一个磁盘有200个磁道（0-199），当前磁头在53号磁道，并且正在向磁道号增加的方向移动。现有磁盘请求队列为：98, 183, 37, 122, 14, 124, 65, 67。请分别计算使用FCFS、SSTF、SCAN和C-SCAN算法完成这些请求所需要的总磁头移动距离。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "假设一个磁盘有200个磁道（0-199），当前磁头在53号磁道，并且正在向磁道号增加的方向移动。现有磁盘请求队列为：98, 183, 37, 122, 14, 124, 65, 67。请分别计算使用FCFS、SSTF、SCAN和C-SCAN算法完成这些请求所需要的总磁头移动距离。"
    },
    {
      "id": "第6章-6-21",
      "chapter": 6,
      "question_number": "6-21",
      "content": "某磁盘的旋转速度为7200转/分钟，平均寻道时间为8毫秒，每个磁道有200个扇区，每个扇区512字节。请计算读取一个扇区所需的平均时间（寻道时间 + 平均旋转延迟 + 传输时间）。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "某磁盘的旋转速度为7200转/分钟，平均寻道时间为8毫秒，每个磁道有200个扇区，每个扇区512字节。请计算读取一个扇区所需的平均时间（寻道时间 + 平均旋转延迟 + 传输时间）。"
    },
    {
      "id": "第6章-6-22",
      "chapter": 6,
      "question_number": "6-22",
      "content": "接上一题，如果要连续读取同一磁道上的10个扇区，总共需要多少时间？这个时间与读取10个单独扇区的时间相比有何不同？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "接上一题，如果要连续读取同一磁道上的10个扇区，总共需要多少时间？这个时间与读取10个单独扇区的时间相比有何不同？"
    },
    {
      "id": "第6章-6-23",
      "chapter": 6,
      "question_number": "6-23",
      "content": "假设某文件大小为1MB，存储在一个磁盘上，该磁盘的块大小为4KB。如果采用DMA方式进行文件读取，CPU需要在数据传输的开始和结束时进行干预，每次干预耗时10微秒。数据传输速率为10MB/s。请计算读取整个文件所需的总DMA传输时间和CPU用于干预的总时间。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "假设某文件大小为1MB，存储在一个磁盘上，该磁盘的块大小为4KB。如果采用DMA方式进行文件读取，CPU需要在数据传输的开始和结束时进行干预，每次干预耗时10微秒。数据传输速率为10MB/s。请计算读取整个文件所需的总DMA传输时间和CPU用于干预的总时间。"
    },
    {
      "id": "第6章-6-24",
      "chapter": 6,
      "question_number": "6-24",
      "content": "基于原题6-12的场景，假定一个硬盘有100个柱面（0-99），每个柱面有10个磁道（0-9），每个磁道有15个扇区（0-14）。请计算逻辑扇区号为12345的三维物理地址（柱面号，磁道号，扇区号）。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "基于原题6-12的场景，假定一个硬盘有100个柱面（0-99），每个柱面有10个磁道（0-9），每个磁道有15个扇区（0-14）。请计算逻辑扇区号为12345的三维物理地址（柱面号，磁道号，扇区号）。"
    },
    {
      "id": "第6章-6-25",
      "chapter": 6,
      "question_number": "6-25",
      "content": "在I/O系统中，缓冲技术是如何解决CPU与I/O设备之间速度不匹配问题的？请分析在输入和输出操作中，单缓冲和双缓冲分别是如何工作的，以及双缓冲在何种情况下能显著提高效率？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "在I/O系统中，缓冲技术是如何解决CPU与I/O设备之间速度不匹配问题的？请分析在输入和输出操作中，单缓冲和双缓冲分别是如何工作的，以及双缓冲在何种情况下能显著提高效率？"
    },
    {
      "id": "第6章-6-26",
      "chapter": 6,
      "question_number": "6-26",
      "content": "Spooling技术是如何利用高速共享设备（如磁盘）来模拟独占的慢速设备（如打印机），从而允许多个进程同时“打印”的？这个过程涉及哪些主要组成部分？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "Spooling技术是如何利用高速共享设备（如磁盘）来模拟独占的慢速设备（如打印机），从而允许多个进程同时“打印”的？这个过程涉及哪些主要组成部分？"
    },
    {
      "id": "第6章-6-27",
      "chapter": 6,
      "question_number": "6-27",
      "content": "RAID 1（镜像）和RAID 5（带分布式奇偶校验的条带化）在提供数据冗余方面有何不同？假设有4块磁盘，请分别计算这两种RAID级别的磁盘空间利用率，并比较它们在写操作性能上的差异。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "RAID 1（镜像）和RAID 5（带分布式奇偶校验的条带化）在提供数据冗余方面有何不同？假设有4块磁盘，请分别计算这两种RAID级别的磁盘空间利用率，并比较它们在写操作性能上的差异。"
    },
    {
      "id": "第6章-6-28",
      "chapter": 6,
      "question_number": "6-28",
      "content": "DMA（直接内存访问）控制器是如何在不占用CPU的情况下完成I/O设备与内存之间的数据传输的？在这个过程中，CPU需要做哪些工作？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "DMA（直接内存访问）控制器是如何在不占用CPU的情况下完成I/O设备与内存之间的数据传输的？在这个过程中，CPU需要做哪些工作？"
    },
    {
      "id": "第6章-6-29",
      "chapter": 6,
      "question_number": "6-29",
      "content": "I/O软件的层次化设计带来了设备独立性。请解释什么是设备独立性，并举例说明它是如何方便用户编程的。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "I/O软件的层次化设计带来了设备独立性。请解释什么是设备独立性，并举例说明它是如何方便用户编程的。"
    },
    {
      "id": "第6章-6-30",
      "chapter": 6,
      "question_number": "6-30",
      "content": "对于原题6-18的场景，一个文件有10个逻辑记录，每个480B。磁带记录密度800 BPI，块间隙0.6英寸。如果采用块因子为10（即所有记录在一个块中），请重新计算磁带空间的利用率，并与块因子为1和5时进行比较。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "对于原题6-18的场景，一个文件有10个逻辑记录，每个480B。磁带记录密度800 BPI，块间隙0.6英寸。如果采用块因子为10（即所有记录在一个块中），请重新计算磁带空间的利用率，并与块因子为1和5时进行比较。"
    },
    {
      "id": "第6章-6-31",
      "chapter": 6,
      "question_number": "6-31",
      "content": "在一个使用中断驱动I/O的系统中，如果一个高速设备（如网络卡）产生中断的频率非常高，会对系统性能造成什么影响？操作系统可以采用什么机制（如NAPI）来缓解这个问题？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "在一个使用中断驱动I/O的系统中，如果一个高速设备（如网络卡）产生中断的频率非常高，会对系统性能造成什么影响？操作系统可以采用什么机制（如NAPI）来缓解这个问题？"
    },
    {
      "id": "第7章-7-1",
      "chapter": 7,
      "question_number": "7-1",
      "content": "Linux系统进程有几种状态？试叙述状态转换的条件是什么？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "Linux系统进程有几种状态？试叙述状态转换的条件是什么？"
    },
    {
      "id": "第7章-7-2",
      "chapter": 7,
      "question_number": "7-2",
      "content": "Linux系统采用什么方法管理系统中处于各种不同状态的进程？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "Linux系统采用什么方法管理系统中处于各种不同状态的进程？"
    },
    {
      "id": "第7章-7-3",
      "chapter": 7,
      "question_number": "7-3",
      "content": "Linux系统有几种创建进程的命令？它们之间的区别是什么？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "Linux系统有几种创建进程的命令？它们之间的区别是什么？"
    },
    {
      "id": "第7章-7-4",
      "chapter": 7,
      "question_number": "7-4",
      "content": "Linux系统有几类进程？各自的调度策略是什么？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "Linux系统有几类进程？各自的调度策略是什么？"
    },
    {
      "id": "第7章-7-5",
      "chapter": 7,
      "question_number": "7-5",
      "content": "Linux系统使用了哪些同步技术实现内核同步？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "Linux系统使用了哪些同步技术实现内核同步？"
    },
    {
      "id": "第7章-7-6",
      "chapter": 7,
      "question_number": "7-6",
      "content": "Linux中的僵尸进程（Zombie Process）是如何产生的？它为什么需要父进程通过`wait()`系统调用来处理？如果父进程不处理，会对系统造成什么长期影响？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "Linux中的僵尸进程（Zombie Process）是如何产生的？它为什么需要父进程通过`wait()`系统调用来处理？如果父进程不处理，会对系统造成什么长期影响？"
    },
    {
      "id": "第7章-7-7",
      "chapter": 7,
      "question_number": "7-7",
      "content": "Linux提供了`fork()`, `vfork()` 和 `clone()` 三种创建进程（或线程）的方式。请简述`vfork()`相比于`fork()`的主要区别和使用场景。`clone()`系统调用又是如何被用来实现线程的？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "Linux提供了`fork()`, `vfork()` 和 `clone()` 三种创建进程（或线程）的方式。请简述`vfork()`相比于`fork()`的主要区别和使用场景。`clone()`系统调用又是如何被用来实现线程的？"
    },
    {
      "id": "第7章-7-8",
      "chapter": 7,
      "question_number": "7-8",
      "content": "Linux进程状态中的`TASK_INTERRUPTIBLE`和`TASK_UNINTERRUPTIBLE`有何区别？请各举一个进程会进入这两种状态的例子。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "Linux进程状态中的`TASK_INTERRUPTIBLE`和`TASK_UNINTERRUPTIBLE`有何区别？请各举一个进程会进入这两种状态的例子。"
    },
    {
      "id": "第7章-7-9",
      "chapter": 7,
      "question_number": "7-9",
      "content": "什么是内核线程？它与普通的用户进程有何不同？请举例说明内核线程在Linux系统中的作用。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "什么是内核线程？它与普通的用户进程有何不同？请举例说明内核线程在Linux系统中的作用。"
    },
    {
      "id": "第8章-8-1",
      "chapter": 8,
      "question_number": "8-1",
      "content": "Linux 系统进程的地址空间是如何划分的？系统是如何管理进程使用的各个虚存 空间的？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "Linux 系统进程的地址空间是如何划分的？系统是如何管理进程使用的各个虚存 空间的？"
    },
    {
      "id": "第8章-8-2",
      "chapter": 8,
      "question_number": "8-2",
      "content": "分区页框分配器管理哪些内存区？伙伴系统的实现原理是什么？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "分区页框分配器管理哪些内存区？伙伴系统的实现原理是什么？"
    },
    {
      "id": "第8章-8-3",
      "chapter": 8,
      "question_number": "8-3",
      "content": "slab分配器的作用是什么？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "slab分配器的作用是什么？"
    },
    {
      "id": "第8章-8-4",
      "chapter": 8,
      "question_number": "8-4",
      "content": "Linux系统对内核占用的1GB空间是如何管理的？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "Linux系统对内核占用的1GB空间是如何管理的？"
    },
    {
      "id": "第8章-8-5",
      "chapter": 8,
      "question_number": "8-5",
      "content": "Linux系统采用几级页表来管理进程的虚空间？叙述页表的组成和各个字段的作用。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "Linux系统采用几级页表来管理进程的虚空间？叙述页表的组成和各个字段的作用。"
    },
    {
      "id": "第8章-8-6",
      "chapter": 8,
      "question_number": "8-6",
      "content": "Linux 伙伴系统（Buddy System）算法是用来解决什么问题的？其“伙伴”的定义是什么，以及它是如何合并和分裂内存块的？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "Linux 伙伴系统（Buddy System）算法是用来解决什么问题的？其“伙伴”的定义是什么，以及它是如何合并和分裂内存块的？"
    },
    {
      "id": "第8章-8-7",
      "chapter": 8,
      "question_number": "8-7",
      "content": "Linux的Slab分配器是如何解决内核中频繁申请和释放小尺寸对象（如进程描述符）所带来的内存碎片和初始化开销问题的？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "Linux的Slab分配器是如何解决内核中频繁申请和释放小尺寸对象（如进程描述符）所带来的内存碎片和初始化开销问题的？"
    },
    {
      "id": "第8章-8-8",
      "chapter": 8,
      "question_number": "8-8",
      "content": "Linux内存管理中为何要划分ZONE_DMA, ZONE_NORMAL, ZONE_HIGHMEM等不同的管理区？这种划分与硬件体系结构有何关系？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "Linux内存管理中为何要划分ZONE_DMA, ZONE_NORMAL, ZONE_HIGHMEM等不同的管理区？这种划分与硬件体系结构有何关系？"
    },
    {
      "id": "第8章-8-9",
      "chapter": 8,
      "question_number": "8-9",
      "content": "请简述Linux系统是如何管理和映射高端内存（HIGHMEM）的，即物理地址大于内核直接映射区域的内存。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "请简述Linux系统是如何管理和映射高端内存（HIGHMEM）的，即物理地址大于内核直接映射区域的内存。"
    },
    {
      "id": "第9章-9-1",
      "chapter": 9,
      "question_number": "9-1",
      "content": "试述Linux的Ext2文件卷的布局，及各部分的作用。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "试述Linux的Ext2文件卷的布局，及各部分的作用。"
    },
    {
      "id": "第9章-9-2",
      "chapter": 9,
      "question_number": "9-2",
      "content": "试述Ext2的目录结构和索引节点包含的内容及作用。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "试述Ext2的目录结构和索引节点包含的内容及作用。"
    },
    {
      "id": "第9章-9-3",
      "chapter": 9,
      "question_number": "9-3",
      "content": "采用什么方法管理磁盘空间和索引节点空间？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "采用什么方法管理磁盘空间和索引节点空间？"
    },
    {
      "id": "第9章-9-4",
      "chapter": 9,
      "question_number": "9-4",
      "content": "Linux Ext2文件系统中的索引节点（inode）存储了文件的哪些关键元数据？为什么文件名不存储在inode中，而是存储在目录文件中？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "Linux Ext2文件系统中的索引节点（inode）存储了文件的哪些关键元数据？为什么文件名不存储在inode中，而是存储在目录文件中？"
    },
    {
      "id": "第9章-9-5",
      "chapter": 9,
      "question_number": "9-5",
      "content": "Ext2文件系统是如何通过多级间接块（一级、二级、三级）来支持大文件存储的？这种设计如何平衡小文件和大文件的存储效率？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "Ext2文件系统是如何通过多级间接块（一级、二级、三级）来支持大文件存储的？这种设计如何平衡小文件和大文件的存储效率？"
    },
    {
      "id": "第9章-9-6",
      "chapter": 9,
      "question_number": "9-6",
      "content": "Ext2文件系统将磁盘划分为多个块组（Block Group）的目的是什么？这种布局对于提高文件访问性能和数据可靠性有何帮助？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "Ext2文件系统将磁盘划分为多个块组（Block Group）的目的是什么？这种布局对于提高文件访问性能和数据可靠性有何帮助？"
    },
    {
      "id": "第10章-10-1",
      "chapter": 10,
      "question_number": "10-1",
      "content": "实现虚拟文件系统，需要哪些数据结构的支持？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "实现虚拟文件系统，需要哪些数据结构的支持？"
    },
    {
      "id": "第10章-10-2",
      "chapter": 10,
      "question_number": "10-2",
      "content": "如何使一个非Linux文件系统能够被Linux系统支持和操作？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "如何使一个非Linux文件系统能够被Linux系统支持和操作？"
    },
    {
      "id": "第10章-10-3",
      "chapter": 10,
      "question_number": "10-3",
      "content": "当一个进程打开一个文件时，核心是通过哪些数据结构来建立进程与文件之间 的联系的？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "当一个进程打开一个文件时，核心是通过哪些数据结构来建立进程与文件之间 的联系的？"
    },
    {
      "id": "第10章-10-4",
      "chapter": 10,
      "question_number": "10-4",
      "content": "什么是虚拟文件系统（VFS）？它在Linux能够“挂载”并透明访问多种不同类型（如Ext2, FAT32, NTFS）的文件系统中起到了什么关键作用？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "什么是虚拟文件系统（VFS）？它在Linux能够“挂载”并透明访问多种不同类型（如Ext2, FAT32, NTFS）的文件系统中起到了什么关键作用？"
    },
    {
      "id": "第10章-10-5",
      "chapter": 10,
      "question_number": "10-5",
      "content": "Linux VFS抽象出了四个核心对象：超级块（superblock）、索引节点（inode）、目录项（dentry）和文件对象（file）。请简要说明这四个对象在VFS层面分别代表什么抽象概念。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "Linux VFS抽象出了四个核心对象：超级块（superblock）、索引节点（inode）、目录项（dentry）和文件对象（file）。请简要说明这四个对象在VFS层面分别代表什么抽象概念。"
    },
    {
      "id": "第10章-10-6",
      "chapter": 10,
      "question_number": "10-6",
      "content": "当一个应用程序调用 `open()` 系统调用时，VFS是如何将一个路径名（如`/home/user/file.txt`）最终解析为一个文件对象的？请简述其中涉及VFS各个对象（dentry, inode等）的主要交互步骤。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "当一个应用程序调用 `open()` 系统调用时，VFS是如何将一个路径名（如`/home/user/file.txt`）最终解析为一个文件对象的？请简述其中涉及VFS各个对象（dentry, inode等）的主要交互步骤。"
    },
    {
      "id": "第11章-11-1",
      "chapter": 11,
      "question_number": "11-1",
      "content": "Linux系统中的设备驱动模型下支持哪些组件？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "Linux系统中的设备驱动模型下支持哪些组件？"
    },
    {
      "id": "第11章-11-2",
      "chapter": 11,
      "question_number": "11-2",
      "content": "实现块设备操作涉及的系统组件有哪些？各自的作用是什么？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "实现块设备操作涉及的系统组件有哪些？各自的作用是什么？"
    },
    {
      "id": "第11章-11-3",
      "chapter": 11,
      "question_number": "11-3",
      "content": "Linux系统的设备缓存是如何实现的？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "Linux系统的设备缓存是如何实现的？"
    },
    {
      "id": "第11章-11-4",
      "chapter": 11,
      "question_number": "11-4",
      "content": "通过列表命令，观察设备文件具有哪些属性？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "通过列表命令，观察设备文件具有哪些属性？"
    },
    {
      "id": "第11章-11-5",
      "chapter": 11,
      "question_number": "11-5",
      "content": "Linux的设备驱动模型是如何通过sysfs文件系统将总线、设备和驱动程序之间的层次关系可视化的？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "Linux的设备驱动模型是如何通过sysfs文件系统将总线、设备和驱动程序之间的层次关系可视化的？"
    },
    {
      "id": "第11章-11-6",
      "chapter": 11,
      "question_number": "11-6",
      "content": "Linux中的块设备和字符设备在数据传输单位和驱动程序处理方式上有何主要区别？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "Linux中的块设备和字符设备在数据传输单位和驱动程序处理方式上有何主要区别？"
    },
    {
      "id": "第11章-11-7",
      "chapter": 11,
      "question_number": "11-7",
      "content": "Linux I/O调度程序层（I/O Scheduler）的主要作用是什么？它如何通过请求合并和排序来优化磁盘性能？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "Linux I/O调度程序层（I/O Scheduler）的主要作用是什么？它如何通过请求合并和排序来优化磁盘性能？"
    },
    {
      "id": "第11章-11-8",
      "chapter": 11,
      "question_number": "11-8",
      "content": "Linux的页高速缓存（Page Cache）机制是如何统一处理文件数据和块设备数据的缓存，从而提高I/O性能的？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "Linux的页高速缓存（Page Cache）机制是如何统一处理文件数据和块设备数据的缓存，从而提高I/O性能的？"
    },
    {
      "id": "第12章-12-1",
      "chapter": 12,
      "question_number": "12-1",
      "content": "中断与异常有什么相同点和不同点？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "中断与异常有什么相同点和不同点？"
    },
    {
      "id": "第12章-12-2",
      "chapter": 12,
      "question_number": "12-2",
      "content": "为什么中断处理时需要提高 CPU 的中断优先级，而异常处理时不需要改变 CPU 的中断优先级？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "为什么中断处理时需要提高 CPU 的中断优先级，而异常处理时不需要改变 CPU 的中断优先级？"
    },
    {
      "id": "第12章-12-3",
      "chapter": 12,
      "question_number": "12-3",
      "content": "Linux的信号机制有什么用途？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "Linux的信号机制有什么用途？"
    },
    {
      "id": "第12章-12-4",
      "chapter": 12,
      "question_number": "12-4",
      "content": "中断和异常在触发原因、处理时机（同步/异步）方面有何根本区别？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "中断和异常在触发原因、处理时机（同步/异步）方面有何根本区别？"
    },
    {
      "id": "第12章-12-5",
      "chapter": 12,
      "question_number": "12-5",
      "content": "Linux中的“不可靠信号”和“可靠信号”在信号是否会丢失以及是否支持排队方面有什么主要区别？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "Linux中的“不可靠信号”和“可靠信号”在信号是否会丢失以及是否支持排队方面有什么主要区别？"
    },
    {
      "id": "第12章-12-6",
      "chapter": 12,
      "question_number": "12-6",
      "content": "一个Linux进程可以通过哪三种方式来响应一个传递给它的信号？哪两个信号是既不能被忽略也不能被捕获的？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "一个Linux进程可以通过哪三种方式来响应一个传递给它的信号？哪两个信号是既不能被忽略也不能被捕获的？"
    },
    {
      "id": "第12章-12-7",
      "chapter": 12,
      "question_number": "12-7",
      "content": "请解释信号的“未决”（Pending）状态和“阻塞”（Blocked）状态之间的关系。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "请解释信号的“未决”（Pending）状态和“阻塞”（Blocked）状态之间的关系。"
    },
    {
      "id": "第13章-13-1",
      "chapter": 13,
      "question_number": "13-1",
      "content": "UNIX系统为进程提供几种通信机制？各用于什么场合？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "UNIX系统为进程提供几种通信机制？各用于什么场合？"
    },
    {
      "id": "第13章-13-2",
      "chapter": 13,
      "question_number": "13-2",
      "content": "UNIX 系统提供的管道通信有几种？各是如何使用的？父子进程之间能否使用有 名管道进行通信？如何实现？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "UNIX 系统提供的管道通信有几种？各是如何使用的？父子进程之间能否使用有 名管道进行通信？如何实现？"
    },
    {
      "id": "第13章-13-3",
      "chapter": 13,
      "question_number": "13-3",
      "content": "编程实现进程之间通过有名管道的通信。设有两个客户进程和一个服务器进 程。服务器进程负责打印，客户进程向服务器进程传递要打印的参数。参数可以是字符串或 字符串指针。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "编程实现进程之间通过有名管道的通信。设有两个客户进程和一个服务器进 程。服务器进程负责打印，客户进程向服务器进程传递要打印的参数。参数可以是字符串或 字符串指针。"
    },
    {
      "id": "第13章-13-4",
      "chapter": 13,
      "question_number": "13-4",
      "content": "考虑一个用信号量集合实现进程对系统多种资源的请求的例子。",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "考虑一个用信号量集合实现进程对系统多种资源的请求的例子。"
    },
    {
      "id": "第13章-13-5",
      "chapter": 13,
      "question_number": "13-5",
      "content": "分别使用消息缓冲、管道机制来实现三个进程间的数据传递。第一个进程从文 件中读数据，并按字节进行 T 变换后传递给第二个进程。第二个进程对收到的数据按字节 进行 F 变换后传递给第三个进程。第三个进程将收到的数据写入文件。T 变换为加 l 后模 64。F变换为加3后模64。 263 --- 第 274 页 --- 第三篇 Windows 2000/XP 操作系统研究",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "分别使用消息缓冲、管道机制来实现三个进程间的数据传递。第一个进程从文 件中读数据，并按字节进行 T 变换后传递给第二个进程。第二个进程对收到的数据按字节 进行 F 变换后传递给第三个进程。第三个进程将收到的数据写入文件。T 变换为加 l 后模 64。F变换为加3后模64。 263 --- 第 274 页 --- 第三篇 Windows 2000/XP 操作系统研究"
    },
    {
      "id": "第13章-13-6",
      "chapter": 13,
      "question_number": "13-6",
      "content": "有名管道（FIFO）与无名管道（Pipe）相比，在生命周期和通信进程关系方面有何不同，使其能用于非亲属关系进程间的通信？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "有名管道（FIFO）与无名管道（Pipe）相比，在生命周期和通信进程关系方面有何不同，使其能用于非亲属关系进程间的通信？"
    },
    {
      "id": "第13章-13-7",
      "chapter": 13,
      "question_number": "13-7",
      "content": "共享内存是效率最高的IPC方式之一，但它为什么需要额外的同步机制（如信号量）来配合使用？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "共享内存是效率最高的IPC方式之一，但它为什么需要额外的同步机制（如信号量）来配合使用？"
    },
    {
      "id": "第13章-13-8",
      "chapter": 13,
      "question_number": "13-8",
      "content": "与管道相比，System V的消息队列（Message Queue）在消息的结构化、读取方式和生命周期方面提供了哪些更灵活的特性？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "与管道相比，System V的消息队列（Message Queue）在消息的结构化、读取方式和生命周期方面提供了哪些更灵活的特性？"
    },
    {
      "id": "第13章-13-9",
      "chapter": 13,
      "question_number": "13-9",
      "content": "System V IPC资源（信号量、消息队列、共享内存）的生命周期与进程的生命周期是怎样的关系？这种“随内核”的生命周期有什么优点和潜在风险？",
      "has_images": false,
      "matched_images": [],
      "image_count": 0,
      "content_with_images": "System V IPC资源（信号量、消息队列、共享内存）的生命周期与进程的生命周期是怎样的关系？这种“随内核”的生命周期有什么优点和潜在风险？"
    }
  ]
}
